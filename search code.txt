Frontend:

Trie.js:

class TrieNode {
    constructor() {
        this.children = {}; // Object to store child nodes
        this.isEndOfWord = false; // Marks the end of a valid word
    }
}

class Trie {
    constructor() {
        this.root = new TrieNode(); // Root node of the Trie
    }

    // Insert a word into the Trie
    insert(word) {
        let currentNode = this.root;
        for (const char of word) {
            if (!currentNode.children[char]) {
                currentNode.children[char] = new TrieNode();
            }
            currentNode = currentNode.children[char];
        }
        currentNode.isEndOfWord = true;
    }

    // Check if a word exists in the Trie
    search(word) {
        let word1=word.toLowerCase();
        let currentNode = this.root;
        for (const char of word1) {
            if (!currentNode.children[char]) {
                return false;
            }
            currentNode = currentNode.children[char];
        }
        return currentNode.isEndOfWord;
    }

    // Check if any word starts with a given prefix
    startsWith(prefix) {
        prefix=prefix.toLowerCase();
        let currentNode = this.root;
        for (const char of prefix) {
            if (!currentNode.children[char]) {
                return false;
            }
            currentNode = currentNode.children[char];
        }
        return true;
    }

    // Get suggestions for a given prefix
    suggest(prefix) {
        prefix=prefix.toLowerCase();
        let currentNode = this.root;
        const suggestions = [];

        // Find the node where the prefix ends
        for (const char of prefix) {
            if (!currentNode.children[char]) {
                return suggestions; // No words with this prefix
            }
            currentNode = currentNode.children[char];
        }

        // Recursively collect all words starting from this node
        this.collectWords(currentNode, prefix, suggestions);
        return suggestions;
    }

    // Helper function to collect words from a given node
    collectWords(node, prefix, suggestions) {
        prefix=prefix.toLowerCase();
        if (node.isEndOfWord) {
            suggestions.push(prefix);
        }
        for (const char in node.children) {
            this.collectWords(node.children[char], prefix + char, suggestions);
        }
    }
}

export default Trie;



App.js:
import React from 'react';
import './App.css';
import Dictionary from './functional/Dictionary';

function App() {
  return (
    <div className="App">
      <Dictionary/>
    </div>
  );
}

export default App;


Dictionary.js:
import React, { useEffect, useState } from 'react';
import Trie from './Trie'; 
import './Dictionary.css';

const Dictionary = () => {
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [word, setWord] = useState('');
    const [suggestions, setSuggestions] = useState([]); // State for suggestions
    const [trie, setTrie] = useState(null); // Trie instance
    const [selectedIndex, setSelectedIndex] = useState(0); // For keyboard navigation

    // Fetch the .txt file and insert words into the Trie
    useEffect(() => {
        fetch('http://localhost:5000/api/words') // Fetch words from the server
            .then((response) => response.text())
            .then((data) => {
                const wordsArray = data.split('\n').map(word => word.trim()); // Removing spaces or newlines
                const trieInstance = new Trie();
                wordsArray.forEach(word => trieInstance.insert(word)); // Insert words into the Trie
                setTrie(trieInstance); // Set trie to state for future use
                setLoading(false); // Update loading state
            })
            .catch((err) => {
                console.error('Error fetching the file:', err);
                setError('Error loading dictionary');
                setLoading(false);
            });
    }, []);

    // Function to update suggestions based on the prefix typed
    const handleInputChange = (e) => {
        const input = e.target.value;
        setWord(input);

        if (input.length > 0 && trie) {
            const matches = trie.suggest(input); // Get word suggestions based on the prefix
            setSuggestions(matches); // Update suggestions state
            setSelectedIndex(0); // Reset selected index when typing
        } else {
            setSuggestions([]); // Clear suggestions when the input is empty
        }
    };

    // Function to select a suggestion (either by click or auto-fill)
    const handleSuggestionClick = (suggestion) => {
        setWord(suggestion); // Auto-fill the input with the selected suggestion
        setSuggestions([]); // Clear suggestions list
    };

    // Handle keyboard navigation through suggestions
    const handleKeyDown = (e) => {
        if (e.key === 'ArrowDown' && selectedIndex < suggestions.length - 1) {
            setSelectedIndex(selectedIndex + 1); // Move down the suggestions list
        } else if (e.key === 'ArrowUp' && selectedIndex > 0) {
            setSelectedIndex(selectedIndex - 1); // Move up the suggestions list
        } else if (e.key === 'Enter' && suggestions[selectedIndex]) {
            setWord(suggestions[selectedIndex]); // Auto-fill the word with the selected suggestion
            setSuggestions([]); // Clear suggestions list
        }
    };

    const handleSearch = () => {
        if (!word) {
            alert('Please enter a word to search');
            return;
        }
        if (trie.search(word)) {
            alert(`The word "${word}" exists in the dictionary.`);
        } else {
            alert(`The word "${word}" does not exist in the dictionary.`);
        }
    };

    return (
        <div className="dictionary-container">
            <h1>Dictionary App</h1>
            {loading && <p>Loading dictionary...</p>}
            {error && <p>{error}</p>}
            <div className="search-bar">
                <input
                    type="text"
                    value={word}
                    onChange={handleInputChange}
                    onKeyDown={handleKeyDown}
                    placeholder="Enter a word to search"
                    disabled={loading}
                />
                <button onClick={handleSearch} disabled={loading}>Search Word</button>
            </div>
            {suggestions.length > 0 && (
                <ul className="suggestions-list">
                    {suggestions.map((suggestion, index) => (
                        <li 
                            key={index} 
                            onClick={() => handleSuggestionClick(suggestion)} 
                            className={selectedIndex === index ? 'highlighted' : ''} // Highlight selected suggestion
                        >
                            {suggestion}
                        </li>
                    ))}
                </ul>
            )}
        </div>
    );
};

export default Dictionary;

Dictionary.css:
.dictionary-container {
    font-family: Arial, sans-serif;
    text-align: center;
    margin: 20px;
}

.search-bar {
    margin: 20px;
}

input {
    padding: 10px;
    font-size: 16px;
    width: 300px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

button {
    padding: 10px 20px;
    font-size: 16px;
    margin-left: 10px;
    cursor: pointer;
    border: 1px solid #ccc;
    border-radius: 4px;
}

button:disabled {
    cursor: not-allowed;
}

.suggestions-list {
    list-style-type: none;
    padding: 0;
    margin-top: 10px;
    max-height: 200px;
    overflow-y: auto;
    border: 1px solid #ccc;
    border-radius: 4px;
    width: 300px;
    margin: 0 auto;
}

.suggestions-list li {
    padding: 10px;
    cursor: pointer;
    background-color: #f9f9f9;
}

.suggestions-list li:hover {
    background-color: #e1e1e1;
}

.suggestions-list li {
    padding: 10px;
    cursor: pointer;
    background-color: #f9f9f9;
}

.suggestions-list li:hover,
.suggestions-list li.highlighted {
    background-color: #e1e1e1; /* Highlight the selected suggestion */
}


Backend:

server.js:
const express = require('express');
const path = require('path');
const fs = require('fs');
const cors = require('cors');  // Import CORS
const app = express();
const port = 5000;

// Enable CORS for all origins (allow all websites to access this server)
app.use(cors());  // Use CORS middleware

// Middleware to parse JSON bodies (optional, for future features)
app.use(express.json());

// Serve the .txt file
app.get('/api/words', (req, res) => {
  const filePath = path.join(__dirname, 'words_alpha.txt');
  
  // Check if the file exists before sending
  fs.access(filePath, fs.constants.F_OK, (err) => {
    if (err) {
      return res.status(404).send('Dictionary file not found.');
    }
    res.sendFile(filePath);
  });
});

// Start the server
app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});
